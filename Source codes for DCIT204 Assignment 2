// Maximum Element:

public class MaximumElement {
    public static int findMax(int[] array) {
        int maxValue = array[0];
        for (int i = 1; i < array.length; i++) {
            if (array[i] > maxValue) {
                maxValue = array[i];
            }
        }
        return maxValue;
    }

    public static void main(String[] args) {
        int[] array = {3, 5, 7, 2, 8, 1};
        System.out.println("The maximum element is: " + findMax(array));
    }
}


// Element Uniqueness:

public class ElementUniqueness {
    public static boolean areElementsUnique(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = i + 1; j < array.length; j++) {
                if (array[i] == array[j]) {
                    return false;
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        System.out.println("Are elements unique? " + areElementsUnique(array));
    }
}


// Matrix Multiplication (Naive):

public class MatrixMultiplication {
    public static int[][] multiply(int[][] a, int[][] b) {
        int n = a.length;
        int[][] result = new int[n][n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                for (int k = 0; k < n; k++) {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        return result;
    }

    public static void main(String[] args) {
        int[][] a = {{1, 2}, {3, 4}};
        int[][] b = {{5, 6}, {7, 8}};
        int[][] result = multiply(a, b);
        for (int[] row : result) {
            for (int elem : row) {
                System.out.print(elem + " ");
            }
            System.out.println();
        }
    }
}


// Counting Binary Digits:

public class CountingBinaryDigits {
    public static int countOnes(int number) {
        int count = 0;
        while (number > 0) {
            count += number & 1; // Add the least significant bit
            number >>= 1; // Right shift the number
        }
        return count;
    }

    public static void main(String[] args) {
        int number = 15; // 1111 in binary
        System.out.println("Number of 1's in binary: " + countOnes(number));
    }
}


// Factorial:

public class Factorial {
    public static long factorial(int n) {
        if (n <= 1) {
            return 1;
        }
        return n * factorial(n - 1);
    }

    public static void main(String[] args) {
        int number = 5;
        System.out.println("Factorial of " + number + " is " + factorial(number));
    }
}


// Tower Of Hanoi:

public class TowerOfHanoi {
    public static void towerOfHanoi(int n, char source, char target, char auxiliary) {
        if (n == 1) {
            System.out.println("Move disk 1 from " + source + " to " + target);
            return;
        }
        towerOfHanoi(n - 1, source, auxiliary, target);
        System.out.println("Move disk " + n + " from " + source + " to " + target);
        towerOfHanoi(n - 1, auxiliary, target, source);
    }

    public static void main(String[] args) {
        int numberOfDisks = 3;
        towerOfHanoi(numberOfDisks, 'A', 'C', 'B');
    }
}


// Fibonacci Numbers:

public class Fibonacci {
    public static long fibonacci(int n) {
        if (n <= 1) {
            return n;
        }
        return fibonacci(n - 1) + fibonacci(n - 2);
    }

    public static void main(String[] args) {
        int n = 10;
        System.out.println("The " + n + "th Fibonacci number is " + fibonacci(n));
    }

// Interactive Application in Java:

import java.util.Scanner;

public class AlgorithmSelector {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (true) {
            System.out.println("Select an algorithm:");
            System.out.println("1. Maximum Element");
            System.out.println("2. Factorial");
            // Add more options here
            System.out.println("0. Exit");
            int choice = scanner.nextInt();
            switch (choice) {
                case 0:
                    System.out.println("Exiting the program.");
                    scanner.close();
                    return;
                case 1:
                    // Code to handle maximum element
                    System.out.println("Enter the number of elements:");
                    int n = scanner.nextInt();
                    int[] array = new int[n];
                    System

}
